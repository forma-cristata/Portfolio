@use 'sass:list';

// SCSS Variables - Size and dimension
$squareSide: 50vh;
$quark1: 3rem;
$quark2: 2.5rem;

// SCSS Variables - Animation timing
$spinner1-time1: 4.8s;
$rotation-time: 8s;

// SCSS Variables - Animation configuration
$quark-count: 13;
$position-step: 12.5%;
$color-step: 6.25%;
$diagonal-offset: 0.7071; // âˆš2/2 for 45-degree positioning

// SCSS Configuration Variables (complex data structures)
$spinner-positions: (
	(10%, 50%),
	(calc(50% - 40% * #{$diagonal-offset}), calc(50% + 40% * #{$diagonal-offset})),
	(50%, 90%),
	(calc(50% + 40% * #{$diagonal-offset}), calc(50% + 40% * #{$diagonal-offset})),
	(90%, 50%),
	(calc(50% + 40% * #{$diagonal-offset}), calc(50% - 40% * #{$diagonal-offset})),
	(50%, 10%),
	(calc(50% - 40% * #{$diagonal-offset}), calc(50% - 40% * #{$diagonal-offset}))
);

$spinner-colors: (
	#ff9100,
	#00ff95,
	#00ffff,
	#0088ff,
	#0000ff,
	#8800ff,
	#ff00ff,
	#ff00bb,
	#ff0088,
	#ff9100,
	#00ff95,
	#00ffff,
	#0088ff,
	#0000ff,
	#8800ff,
	#ff00ff
);

.spinner-1 {
	width: $squareSide;
	height: $squareSide;
	/*border: 1px white solid;*/
	position: relative;
	animation: $rotation-time rotate infinite linear reverse;
}

.quarks {
	// Base styles for all quarks
	position: absolute;
	top: 10%;
	left: 50%;
	animation: spinner-1 $spinner1-time1 infinite;

	border-radius: 50%;
	transform: translate(-50%, -50%);
	text-align: center;
	justify-content: center;

	&.q1 {
		background-color: white;
		width: $quark1;
		height: $quark1;
		z-index: 1;
	}

	&.q2 {
		background-color: black;
		width: $quark2;
		height: $quark2;
		z-index: 2;
	}

	// First set of quarks (1-13)
	@for $i from 1 through $quark-count {
		&:nth-child(#{$i}) {
			animation-delay: calc(#{$spinner1-time1} * #{$i - 1} / 12);
		}
	}

	// Second set of quarks (14-26) - offset by 13
	@for $i from 1 through $quark-count {
		$child-index: $i + 13;
		&:nth-child(#{$child-index}) {
			animation-delay: calc(#{$spinner1-time1} * #{$i - 1} / 12);
		}
	}
}

// SCSS Mixins for generating keyframes
@mixin rotation-keyframes($name: 'rotate', $start: 0deg, $end: 360deg, $steps: null) {
	@keyframes #{$name} {
		@if $steps {
			// Generate intermediate steps
			@for $i from 0 through $steps {
				$percent: percentage($i / $steps);
				$rotation: $start + ($end - $start) * ($i / $steps);
				#{$percent} {
					transform: rotate(#{$rotation});
				}
			}
		} @else {
			// Simple from/to animation
			from {
				transform: rotate(#{$start});
			}
			to {
				transform: rotate(#{$end});
			}
		}
	}
}

@mixin spinner-path-keyframes($name, $positions, $colors, $position-step: 12.5%, $color-step: 6.25%) {
	@keyframes #{$name} {
		// Generate position keyframes
		@for $i from 0 through (list.length($positions) - 1) {
			$percent: $i * $position-step;
			$position: list.nth($positions, $i + 1);

			#{$percent} {
				top: list.nth($position, 1);
				left: list.nth($position, 2);
				@if $i == 0 {
					border: 2px list.nth($colors, 1) solid;
				}
			}
		}

		// Generate color keyframes
		@for $i from 1 through (list.length($colors) - 1) {
			$percent: $i * $color-step;
			#{$percent} {
				border: 2px list.nth($colors, $i + 1) solid;
			}
		}

		// Final state (100%)
		100% {
			$first-position: list.nth($positions, 1);
			top: list.nth($first-position, 1);
			left: list.nth($first-position, 2);
			border: 2px list.nth($colors, 1) solid;
		}
	}
}

// Generate keyframes using mixins
@include spinner-path-keyframes('spinner-1', $spinner-positions, $spinner-colors);
@include rotation-keyframes('rotate', 0deg, 360deg);
